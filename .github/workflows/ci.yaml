name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version (e.g., 1.2.3)'
        required: true
        type: string
      deploy:
        description: 'Deploy to production'
        required: true
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sam123ben/agile-poker
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  ci-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name != 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test

      - name: Build application
        run: npm run build

      - name: Set CI version
        run: |
          echo "IMAGE_VERSION=ci-${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push CI image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.version=${{ env.IMAGE_VERSION }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'workflow_dispatch' && inputs.deploy == true

    steps:
      - name: Validate semver
        run: |
          if ! echo "${{ github.event.inputs.version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Invalid semantic version format. Must be X.Y.Z"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test

      - name: Run E2E tests
        run: |
          npx playwright install --with-deps
          npm run test:e2e

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          labels: |
            org.opencontainers.image.version=${{ github.event.inputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  notify:
    needs: [ci-build, release-build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check build status
        if: contains(needs.*.result, 'failure')
        run: exit 1

      - name: Notify success
        if: success()
        run: |
          echo "All builds completed successfully"
          # Add your notification logic here (e.g., Slack, Discord, etc.)